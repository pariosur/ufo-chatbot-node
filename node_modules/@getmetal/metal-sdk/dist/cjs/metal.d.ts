import { type Client, type IndexInput, type BulkIndexItemInput, type SearchInput, type TuningInput, type UploadFilePayload, type AddDatasourcePayload, type UpdateDatasourcePayload, type CreateIndexPayload, type AddDataEntityPayload } from './types';
export declare class Metal implements Client {
    apiKey: string;
    indexId?: string;
    clientId: string;
    constructor(apiKey: string, clientId: string, indexId?: string);
    index(payload: IndexInput): Promise<object>;
    indexMany(payload: BulkIndexItemInput[]): Promise<object>;
    search(payload?: SearchInput): Promise<object[]>;
    tune(payload: TuningInput): Promise<object>;
    getOne(id: string, indexId?: string): Promise<object>;
    getMany(ids: string[], indexId?: string): Promise<object>;
    deleteOne(id: string, indexId?: string): Promise<object>;
    deleteMany(ids: string[], indexId?: string): Promise<object>;
    private createResource;
    private uploadFileToUrl;
    uploadFile(file: UploadFilePayload, indexId?: string): Promise<object>;
    addDatasource(payload: AddDatasourcePayload): Promise<object>;
    getDatasource(id: string): Promise<object>;
    getAllDatasources(limit?: number, page?: number): Promise<object>;
    deleteDatasource(id: string): Promise<void>;
    updateDatasource(id: string, payload: UpdateDatasourcePayload): Promise<object>;
    getDataEntity(id: string): Promise<object>;
    deleteDataEntity(id: string): Promise<void>;
    getAllDataEntities(datasourceId: string, limit?: number, page?: number): Promise<object>;
    private addDataEntityResource;
    addDataEntity(payload: AddDataEntityPayload): Promise<object>;
    addIndex(payload: CreateIndexPayload): Promise<object>;
}
export default Metal;
