"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Motorhead = void 0;
const constants_1 = require("./constants");
const request_1 = require("./request");
const MANAGED_BASE_URL = `${constants_1.API_URL}/v1/motorhead`;
class Motorhead {
    constructor({ apiKey, clientId, baseUrl = MANAGED_BASE_URL }) {
        const isManaged = baseUrl === MANAGED_BASE_URL;
        if (isManaged && (!apiKey || !clientId)) {
            throw new Error('apiKey and clientId required for managed motorhead');
        }
        this.apiKey = apiKey;
        this.clientId = clientId;
        this.baseUrl = baseUrl;
    }
    addMemory(sessionId, payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield (0, request_1.request)(`${this.baseUrl}/sessions/${sessionId}/memory`, {
                method: 'POST',
                body: JSON.stringify(payload),
                headers: {
                    'Content-Type': 'application/json',
                    'x-metal-api-key': this.apiKey,
                    'x-metal-client-id': this.clientId,
                },
            });
            return data;
        });
    }
    getMemory(sessionId) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield (0, request_1.request)(`${this.baseUrl}/sessions/${sessionId}/memory`, {
                headers: {
                    'Content-Type': 'application/json',
                    'x-metal-api-key': this.apiKey,
                    'x-metal-client-id': this.clientId,
                },
            });
            return data;
        });
    }
    deleteMemory(sessionId) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield (0, request_1.request)(`${this.baseUrl}/sessions/${sessionId}/memory`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                    'x-metal-api-key': this.apiKey,
                    'x-metal-client-id': this.clientId,
                },
            });
            return data;
        });
    }
}
exports.Motorhead = Motorhead;
exports.default = Motorhead;
