"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Metal = void 0;
const mime_types_1 = __importDefault(require("mime-types"));
const constants_1 = require("./constants");
const helpers_1 = require("./helpers");
const request_1 = require("./request");
class Metal {
    constructor(apiKey, clientId, indexId) {
        this.apiKey = apiKey;
        this.indexId = indexId;
        this.clientId = clientId;
    }
    index(payload) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const index = (_a = payload.indexId) !== null && _a !== void 0 ? _a : this.indexId;
            if (!index) {
                throw new Error('indexId required');
            }
            const { imageBase64, imageUrl, text, embedding } = payload;
            if (!imageBase64 && !imageUrl && !text && !embedding) {
                throw new Error('payload required');
            }
            const body = { index };
            if (payload === null || payload === void 0 ? void 0 : payload.id) {
                body.id = payload.id;
            }
            if (payload === null || payload === void 0 ? void 0 : payload.metadata) {
                body.metadata = payload.metadata;
            }
            if (imageBase64) {
                body.imageBase64 = imageBase64;
            }
            else if (imageUrl) {
                body.imageUrl = imageUrl;
            }
            else if (text) {
                body.text = text;
            }
            else if (embedding != null) {
                body.embedding = embedding;
            }
            const data = yield (0, request_1.request)(`${constants_1.API_URL}/v1/index`, {
                method: 'POST',
                body: JSON.stringify(body),
                headers: {
                    'Content-Type': 'application/json',
                    'x-metal-api-key': this.apiKey,
                    'x-metal-client-id': this.clientId,
                },
            });
            return data;
        });
    }
    indexMany(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            for (const item of payload) {
                if (!item.index) {
                    item.index = this.indexId;
                }
            }
            const body = { data: payload };
            const data = yield (0, request_1.request)(`${constants_1.API_URL}/v1/index/bulk`, {
                method: 'POST',
                body: JSON.stringify(body),
                headers: {
                    'Content-Type': 'application/json',
                    'x-metal-api-key': this.apiKey,
                    'x-metal-client-id': this.clientId,
                },
            });
            return data;
        });
    }
    search(payload = {}) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const index = (_a = payload.indexId) !== null && _a !== void 0 ? _a : this.indexId;
            if (!index) {
                throw new Error('indexId required');
            }
            const { imageBase64, imageUrl, text, filters } = payload;
            const body = { index, filters };
            if (imageBase64) {
                body.imageBase64 = imageBase64;
            }
            else if (imageUrl) {
                body.imageUrl = imageUrl;
            }
            else if (text) {
                body.text = text;
            }
            const limit = (_b = payload.limit) !== null && _b !== void 0 ? _b : 10;
            let url = `${constants_1.API_URL}/v1/search?limit=${limit}`;
            if (payload.idsOnly) {
                url += '&idsOnly=true';
            }
            const data = yield (0, request_1.request)(url, {
                method: 'POST',
                body: JSON.stringify(body),
                headers: {
                    'Content-Type': 'application/json',
                    'x-metal-api-key': this.apiKey,
                    'x-metal-client-id': this.clientId,
                },
            });
            return data;
        });
    }
    tune(payload) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const index = (_a = payload.indexId) !== null && _a !== void 0 ? _a : this.indexId;
            if (!index) {
                throw new Error('indexId required');
            }
            if (!payload.idA || !payload.idB || Number.isNaN(payload.label)) {
                throw new Error('idA, idB, & label required for payload');
            }
            const body = Object.assign({ index }, payload);
            const data = yield (0, request_1.request)(`${constants_1.API_URL}/v1/tune`, {
                method: 'POST',
                body: JSON.stringify(body),
                headers: {
                    'Content-Type': 'application/json',
                    'x-metal-api-key': this.apiKey,
                    'x-metal-client-id': this.clientId,
                },
            });
            return data;
        });
    }
    getOne(id, indexId) {
        return __awaiter(this, void 0, void 0, function* () {
            const index = indexId !== null && indexId !== void 0 ? indexId : this.indexId;
            if (!id) {
                throw new Error('id required');
            }
            if (!index) {
                throw new Error('indexId required');
            }
            const data = yield (0, request_1.request)(`${constants_1.API_URL}/v1/indexes/${index}/documents/${id}`, {
                headers: {
                    'Content-Type': 'application/json',
                    'x-metal-api-key': this.apiKey,
                    'x-metal-client-id': this.clientId,
                },
            });
            return data;
        });
    }
    getMany(ids, indexId) {
        return __awaiter(this, void 0, void 0, function* () {
            const index = indexId !== null && indexId !== void 0 ? indexId : this.indexId;
            if ((ids === null || ids === void 0 ? void 0 : ids.length) > 100 || (ids === null || ids === void 0 ? void 0 : ids.length) < 1) {
                throw new Error('ids should be between 1 and 100');
            }
            if (!index) {
                throw new Error('indexId required');
            }
            const data = yield (0, request_1.request)(`${constants_1.API_URL}/v1/indexes/${index}/documents/${ids.join(',')}`, {
                headers: {
                    'Content-Type': 'application/json',
                    'x-metal-api-key': this.apiKey,
                    'x-metal-client-id': this.clientId,
                },
            });
            return data;
        });
    }
    deleteOne(id, indexId) {
        return __awaiter(this, void 0, void 0, function* () {
            const index = indexId !== null && indexId !== void 0 ? indexId : this.indexId;
            if (!id) {
                throw new Error('id required');
            }
            if (!index) {
                throw new Error('indexId required');
            }
            const data = yield (0, request_1.request)(`${constants_1.API_URL}/v1/indexes/${index}/documents/${id}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                    'x-metal-api-key': this.apiKey,
                    'x-metal-client-id': this.clientId,
                },
            });
            return data;
        });
    }
    deleteMany(ids, indexId) {
        return __awaiter(this, void 0, void 0, function* () {
            const index = indexId !== null && indexId !== void 0 ? indexId : this.indexId;
            if (!index) {
                throw new Error('indexId required');
            }
            if (!(ids === null || ids === void 0 ? void 0 : ids.length)) {
                throw new Error('ids required');
            }
            const data = yield (0, request_1.request)(`${constants_1.API_URL}/v1/indexes/${index}/documents/bulk`, {
                method: 'DELETE',
                body: JSON.stringify({ ids }),
                headers: {
                    'Content-Type': 'application/json',
                    'x-metal-api-key': this.apiKey,
                    'x-metal-client-id': this.clientId,
                },
            });
            return data;
        });
    }
    createResource(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { indexId, fileName, fileType, fileSize } = payload;
            const url = `${constants_1.API_URL}/v1/indexes/${indexId}/files`;
            const body = {
                fileName: (0, helpers_1.sanitizeFilename)(fileName),
                fileType,
            };
            const headers = {
                'Content-Type': 'application/json',
                'x-metal-file-size': fileSize.toString(),
                'x-metal-api-key': this.apiKey,
                'x-metal-client-id': this.clientId,
            };
            const data = yield (0, request_1.request)(url, {
                method: 'POST',
                body: JSON.stringify(body),
                headers,
            });
            return data;
        });
    }
    uploadFileToUrl(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { url, file, fileType, fileSize } = payload;
            const headers = {
                'content-type': fileType,
                'content-length': fileSize.toString(),
            };
            const data = yield (0, request_1.request)(url, {
                method: 'PUT',
                body: file,
                headers,
            });
            return data;
        });
    }
    uploadFile(file, indexId) {
        return __awaiter(this, void 0, void 0, function* () {
            const index = indexId !== null && indexId !== void 0 ? indexId : this.indexId;
            if (!index) {
                throw new Error('indexId required');
            }
            let fileType;
            let fileSize;
            let fileName;
            let fileData;
            if (typeof file === 'string') {
                const fs = yield Promise.resolve().then(() => __importStar(require('fs')));
                const path = yield Promise.resolve().then(() => __importStar(require('path')));
                fileType = mime_types_1.default.lookup(file) || '';
                fileSize = fs.statSync(file).size;
                fileName = path.basename(file);
                fileData = fs.readFileSync(file);
            }
            else {
                fileType = file.type || '';
                fileSize = file.size;
                fileName = file.name;
                fileData = file;
            }
            if (!constants_1.SUPPORTED_FILE_TYPES.includes(fileType)) {
                throw new Error('Invalid file type. Supported types are: pdf, docx, csv.');
            }
            const resource = yield this.createResource({ indexId: index, fileName, fileType, fileSize });
            return yield this.uploadFileToUrl({ url: resource.url, file: fileData, fileType, fileSize });
        });
    }
    addDatasource(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!payload.name) {
                throw new Error('name required');
            }
            if (!payload.sourcetype) {
                throw new Error('sourcetype required');
            }
            const url = `${constants_1.API_URL}/v1/datasources`;
            const data = yield (0, request_1.request)(url, {
                method: 'POST',
                body: JSON.stringify(payload),
                headers: {
                    'Content-Type': 'application/json',
                    'x-metal-api-key': this.apiKey,
                    'x-metal-client-id': this.clientId,
                },
            });
            return data;
        });
    }
    getDatasource(id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id) {
                throw new Error('id required');
            }
            const url = `${constants_1.API_URL}/v1/datasources/${id}`;
            const data = yield (0, request_1.request)(url, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'x-metal-api-key': this.apiKey,
                    'x-metal-client-id': this.clientId,
                },
            });
            return data;
        });
    }
    getAllDatasources(limit, page) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = new URLSearchParams();
            if (limit)
                params.append('limit', limit.toString());
            if (page)
                params.append('page', page.toString());
            const url = `${constants_1.API_URL}/v1/datasources?${params.toString()}`;
            const data = yield (0, request_1.request)(url, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'x-metal-api-key': this.apiKey,
                    'x-metal-client-id': this.clientId,
                },
            });
            return data;
        });
    }
    deleteDatasource(id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id) {
                throw new Error('id required');
            }
            const url = `${constants_1.API_URL}/v1/datasources/${id}`;
            const response = yield fetch(url, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                    'x-metal-api-key': this.apiKey,
                    'x-metal-client-id': this.clientId,
                },
            });
            if (!response.ok) {
                throw new Error(`Error deleting data source: ${response.statusText}`);
            }
        });
    }
    updateDatasource(id, payload) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id) {
                throw new Error('id required');
            }
            const url = `${constants_1.API_URL}/v1/datasources/${id}`;
            const data = yield (0, request_1.request)(url, {
                method: 'PUT',
                body: JSON.stringify(payload),
                headers: {
                    'Content-Type': 'application/json',
                    'x-metal-api-key': this.apiKey,
                    'x-metal-client-id': this.clientId,
                },
            });
            return data;
        });
    }
    getDataEntity(id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id) {
                throw new Error('id required');
            }
            const url = `${constants_1.API_URL}/v1/data-entities/${id}`;
            const data = yield (0, request_1.request)(url, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'x-metal-api-key': this.apiKey,
                    'x-metal-client-id': this.clientId,
                },
            });
            return data;
        });
    }
    deleteDataEntity(id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id) {
                throw new Error('id required');
            }
            const url = `${constants_1.API_URL}/v1/data-entities/${id}`;
            const response = yield fetch(url, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                    'x-metal-api-key': this.apiKey,
                    'x-metal-client-id': this.clientId,
                },
            });
            if (!response.ok) {
                throw new Error(`Error deleting data entity: ${response.statusText}`);
            }
        });
    }
    getAllDataEntities(datasourceId, limit, page) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!datasourceId) {
                throw new Error('id required');
            }
            const params = new URLSearchParams();
            if (limit !== undefined)
                params.append('limit', limit.toString());
            if (page !== undefined)
                params.append('page', page.toString());
            const url = `${constants_1.API_URL}/v1/datasources/${datasourceId}/data-entities?${params.toString()}`;
            const data = yield (0, request_1.request)(url, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'x-metal-api-key': this.apiKey,
                    'x-metal-client-id': this.clientId,
                },
            });
            return data;
        });
    }
    addDataEntityResource(datasource, fileName, fileSize, metadata) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${constants_1.API_URL}/v1/data-entities`;
            const body = {
                datasource,
                name: (0, helpers_1.sanitizeFilename)(fileName),
                sourceType: 'file',
                metadata,
            };
            const headers = {
                'Content-Type': 'application/json',
                'x-metal-file-size': fileSize.toString(),
                'x-metal-api-key': this.apiKey,
                'x-metal-client-id': this.clientId,
            };
            return yield (0, request_1.request)(url, {
                method: 'POST',
                body: JSON.stringify(body),
                headers,
            });
        });
    }
    addDataEntity(payload) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { datasource, filepath, metadata } = payload;
            if (!datasource) {
                throw new Error("Payload must contain a 'datasource' id");
            }
            let fileType;
            let fileSize;
            let fileName;
            let fileData;
            if (typeof filepath === 'string') {
                const fs = yield Promise.resolve().then(() => __importStar(require('fs')));
                const path = yield Promise.resolve().then(() => __importStar(require('path')));
                fileType = mime_types_1.default.lookup(filepath) || '';
                fileSize = fs.statSync(filepath).size;
                fileName = path.basename(filepath);
                fileData = fs.readFileSync(filepath);
            }
            else {
                const fileObject = filepath;
                fileType = (_a = fileObject.type) !== null && _a !== void 0 ? _a : '';
                fileSize = fileObject.size;
                fileName = fileObject.name;
                fileData = fileObject;
            }
            const dataEntityResource = yield this.addDataEntityResource(datasource, fileName, fileSize, metadata);
            if (!(dataEntityResource === null || dataEntityResource === void 0 ? void 0 : dataEntityResource.url)) {
                throw new Error('Failed to create a data entity resource.');
            }
            // Upload the file to the returned URL
            return yield this.uploadFileToUrl({
                url: dataEntityResource.url,
                file: fileData,
                fileType,
                fileSize,
            });
        });
    }
    addIndex(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!payload.name) {
                throw new Error('Index name is required in payload');
            }
            const body = Object.assign({}, payload);
            const data = yield (0, request_1.request)(`${constants_1.API_URL}/v1/indexes`, {
                method: 'POST',
                body: JSON.stringify(body),
                headers: {
                    'Content-Type': 'application/json',
                    'x-metal-api-key': this.apiKey,
                    'x-metal-client-id': this.clientId,
                },
            });
            return data;
        });
    }
}
exports.Metal = Metal;
exports.default = Metal;
